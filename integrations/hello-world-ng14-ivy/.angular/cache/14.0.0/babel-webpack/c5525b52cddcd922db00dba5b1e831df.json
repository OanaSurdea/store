{
  "ast": null,
  "code": "import * as i0 from '@angular/core';\nimport { InjectionToken, PLATFORM_ID, Injectable, Inject, Injector, NgModule } from '@angular/core';\nimport { StateToken, actionMatcher, InitState, UpdateState, getValue, setValue, NGXS_PLUGINS } from '@ngxs/store';\nimport { isPlatformServer } from '@angular/common';\nimport { tap } from 'rxjs/operators';\nconst NGXS_STORAGE_PLUGIN_OPTIONS = new InjectionToken('NGXS_STORAGE_PLUGIN_OPTIONS');\nconst STORAGE_ENGINE = new InjectionToken('STORAGE_ENGINE');\n/**\n * The following key is used to store the entire serialized\n * state when there's no specific state provided.\n */\n\nconst DEFAULT_STATE_KEY = '@@STATE';\n\nfunction storageOptionsFactory(options) {\n  return Object.assign({\n    key: [DEFAULT_STATE_KEY],\n    storage: 0\n    /* LocalStorage */\n    ,\n    serialize: JSON.stringify,\n    deserialize: JSON.parse,\n    beforeSerialize: obj => obj,\n    afterDeserialize: obj => obj\n  }, options);\n}\n\nfunction engineFactory(options, platformId) {\n  if (isPlatformServer(platformId)) {\n    return null;\n  }\n\n  if (options.storage === 0\n  /* LocalStorage */\n  ) {\n    return localStorage;\n  } else if (options.storage === 1\n  /* SessionStorage */\n  ) {\n    return sessionStorage;\n  }\n\n  return null;\n}\n\nfunction getStorageKey(key, options) {\n  // Prepends the `namespace` option to any key if it's been provided by a user.\n  // So `@@STATE` becomes `my-app:@@STATE`.\n  return options && options.namespace ? `${options.namespace}:${key}` : key;\n}\n/** Determines whether the provided key has the following structure. */\n\n\nfunction isKeyWithExplicitEngine(key) {\n  return key != null && !!key.engine;\n}\n/** This symbol is used to store the metadata on state classes. */\n\n\nconst META_OPTIONS_KEY = 'NGXS_OPTIONS_META';\n\nfunction exctractStringKey(storageKey) {\n  // Extract the actual key out of the `{ key, engine }` structure.\n  if (isKeyWithExplicitEngine(storageKey)) {\n    storageKey = storageKey.key;\n  } // Given the `storageKey` is a class, for instance, `AuthState`.\n  // We should retrieve its metadata and the `name` property.\n  // The `name` property might be a string (state name) or a state token.\n\n\n  if (storageKey.hasOwnProperty(META_OPTIONS_KEY)) {\n    storageKey = storageKey[META_OPTIONS_KEY].name;\n  }\n\n  return storageKey instanceof StateToken ? storageKey.getName() : storageKey;\n}\n\nconst FINAL_NGXS_STORAGE_PLUGIN_OPTIONS = new InjectionToken('FINAL_NGXS_STORAGE_PLUGIN_OPTIONS');\n\nfunction createFinalStoragePluginOptions(injector, options) {\n  const storageKeys = Array.isArray(options.key) ? options.key : [options.key];\n  const keysWithEngines = storageKeys.map(storageKey => {\n    const key = exctractStringKey(storageKey);\n    const engine = isKeyWithExplicitEngine(storageKey) ? injector.get(storageKey.engine) : injector.get(STORAGE_ENGINE);\n    return {\n      key,\n      engine\n    };\n  });\n  return Object.assign(Object.assign({}, options), {\n    keysWithEngines\n  });\n}\n\nlet NgxsStoragePlugin = /*#__PURE__*/(() => {\n  class NgxsStoragePlugin {\n    constructor(_options, _platformId) {\n      this._options = _options;\n      this._platformId = _platformId;\n      this._keysWithEngines = this._options.keysWithEngines; // We default to `[DEFAULT_STATE_KEY]` if the user explicitly does not provide the `key` option.\n\n      this._usesDefaultStateKey = this._keysWithEngines.length === 1 && this._keysWithEngines[0].key === DEFAULT_STATE_KEY;\n    }\n\n    handle(state, event, next) {\n      if (isPlatformServer(this._platformId)) {\n        return next(state, event);\n      }\n\n      const matches = actionMatcher(event);\n      const isInitAction = matches(InitState);\n      const isUpdateAction = matches(UpdateState);\n      const isInitOrUpdateAction = isInitAction || isUpdateAction;\n      let hasMigration = false;\n\n      if (isInitOrUpdateAction) {\n        const addedStates = isUpdateAction && event.addedStates;\n\n        for (const {\n          key,\n          engine\n        } of this._keysWithEngines) {\n          // We're checking what states have been added by NGXS and if any of these states should be handled by\n          // the storage plugin. For instance, we only want to deserialize the `auth` state, NGXS has added\n          // the `user` state, the storage plugin will be rerun and will do redundant deserialization.\n          // `usesDefaultStateKey` is necessary to check since `event.addedStates` never contains `@@STATE`.\n          if (!this._usesDefaultStateKey && addedStates) {\n            // We support providing keys that can be deeply nested via dot notation, for instance,\n            // `keys: ['myState.myProperty']` is a valid key.\n            // The state name should always go first. The below code checks if the `key` includes dot\n            // notation and extracts the state name out of the key.\n            // Given the `key` is `myState.myProperty`, the `addedStates` will only contain `myState`.\n            const dotNotationIndex = key.indexOf(DOT);\n            const stateName = dotNotationIndex > -1 ? key.slice(0, dotNotationIndex) : key;\n\n            if (!addedStates.hasOwnProperty(stateName)) {\n              continue;\n            }\n          }\n\n          const storageKey = getStorageKey(key, this._options);\n          let storedValue = engine.getItem(storageKey);\n\n          if (storedValue !== 'undefined' && storedValue != null) {\n            try {\n              const newVal = this._options.deserialize(storedValue);\n\n              storedValue = this._options.afterDeserialize(newVal, key);\n            } catch (_a) {\n              // Caretaker note: we have still left the `typeof` condition in order to avoid\n              // creating a breaking change for projects that still use the View Engine.\n              if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                console.error(`Error ocurred while deserializing the ${storageKey} store value, falling back to empty object, the value obtained from the store: `, storedValue);\n              }\n\n              storedValue = {};\n            }\n\n            if (this._options.migrations) {\n              this._options.migrations.forEach(strategy => {\n                const versionMatch = strategy.version === getValue(storedValue, strategy.versionKey || 'version');\n                const keyMatch = !strategy.key && this._usesDefaultStateKey || strategy.key === key;\n\n                if (versionMatch && keyMatch) {\n                  storedValue = strategy.migrate(storedValue);\n                  hasMigration = true;\n                }\n              });\n            }\n\n            if (!this._usesDefaultStateKey) {\n              state = setValue(state, key, storedValue);\n            } else {\n              // The `UpdateState` action is dispatched whenever the feature state is added.\n              // The below condition is met only when the `UpdateState` is dispatched.\n              // Let's assume that we have 2 states `counter` and `@ngxs/router-plugin` state.\n              // `CounterState` is provided on the root level when calling `NgxsModule.forRoot()`\n              // and `@ngxs/router-plugin` is provided as a feature state.\n              // The storage plugin may save the `counter` state value as `10` before.\n              // The `CounterState` may implement the `ngxsOnInit` hook and call `ctx.setState(999)`.\n              // The storage plugin will re-hydrate the whole state when the `RouterState` is registered,\n              // and the `counter` state will again equal `10` (not `999`).\n              if (storedValue && addedStates && Object.keys(addedStates).length > 0) {\n                storedValue = Object.keys(addedStates).reduce((accumulator, addedState) => {\n                  // The `storedValue` may equal the whole state (when the default state key is used).\n                  // If `addedStates` contains only `router` then we want to merge the state only\n                  // with the `router` value.\n                  // Let's assume that the `storedValue` is an object:\n                  // `{ counter: 10, router: {...} }`\n                  // This will pick only the `router` object from the `storedValue` and `counter`\n                  // state will not be re-hydrated unnecessary.\n                  if (storedValue.hasOwnProperty(addedState)) {\n                    accumulator[addedState] = storedValue[addedState];\n                  }\n\n                  return accumulator;\n                }, {});\n              }\n\n              state = Object.assign(Object.assign({}, state), storedValue);\n            }\n          }\n        }\n      }\n\n      return next(state, event).pipe(tap(nextState => {\n        if (!isInitOrUpdateAction || isInitOrUpdateAction && hasMigration) {\n          for (const {\n            key,\n            engine\n          } of this._keysWithEngines) {\n            let storedValue = nextState;\n            const storageKey = getStorageKey(key, this._options);\n\n            if (key !== DEFAULT_STATE_KEY) {\n              storedValue = getValue(nextState, key);\n            }\n\n            try {\n              const newStoredValue = this._options.beforeSerialize(storedValue, key);\n\n              engine.setItem(storageKey, this._options.serialize(newStoredValue));\n            } catch (error) {\n              // Caretaker note: we have still left the `typeof` condition in order to avoid\n              // creating a breaking change for projects that still use the View Engine.\n              if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                if (error && (error.name === 'QuotaExceededError' || error.name === 'NS_ERROR_DOM_QUOTA_REACHED')) {\n                  console.error(`The ${storageKey} store value exceeds the browser storage quota: `, storedValue);\n                } else {\n                  console.error(`Error ocurred while serializing the ${storageKey} store value, value not updated, the value obtained from the store: `, storedValue);\n                }\n              }\n            }\n          }\n        }\n      }));\n    }\n\n  }\n\n  /** @nocollapse */\n  NgxsStoragePlugin.ɵfac = function NgxsStoragePlugin_Factory(t) {\n    return new (t || NgxsStoragePlugin)(i0.ɵɵinject(FINAL_NGXS_STORAGE_PLUGIN_OPTIONS), i0.ɵɵinject(PLATFORM_ID));\n  };\n  /** @nocollapse */\n\n\n  NgxsStoragePlugin.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NgxsStoragePlugin,\n    factory: NgxsStoragePlugin.ɵfac\n  });\n  return NgxsStoragePlugin;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst DOT = '.';\nconst USER_OPTIONS = new InjectionToken('USER_OPTIONS');\nlet NgxsStoragePluginModule = /*#__PURE__*/(() => {\n  class NgxsStoragePluginModule {\n    static forRoot(options) {\n      return {\n        ngModule: NgxsStoragePluginModule,\n        providers: [{\n          provide: NGXS_PLUGINS,\n          useClass: NgxsStoragePlugin,\n          multi: true\n        }, {\n          provide: USER_OPTIONS,\n          useValue: options\n        }, {\n          provide: NGXS_STORAGE_PLUGIN_OPTIONS,\n          useFactory: storageOptionsFactory,\n          deps: [USER_OPTIONS]\n        }, {\n          provide: STORAGE_ENGINE,\n          useFactory: engineFactory,\n          deps: [NGXS_STORAGE_PLUGIN_OPTIONS, PLATFORM_ID]\n        }, {\n          provide: FINAL_NGXS_STORAGE_PLUGIN_OPTIONS,\n          useFactory: createFinalStoragePluginOptions,\n          deps: [Injector, NGXS_STORAGE_PLUGIN_OPTIONS]\n        }]\n      };\n    }\n\n  }\n\n  /** @nocollapse */\n  NgxsStoragePluginModule.ɵfac = function NgxsStoragePluginModule_Factory(t) {\n    return new (t || NgxsStoragePluginModule)();\n  };\n  /** @nocollapse */\n\n\n  NgxsStoragePluginModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgxsStoragePluginModule\n  });\n  /** @nocollapse */\n\n  NgxsStoragePluginModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return NgxsStoragePluginModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst LOCAL_STORAGE_ENGINE = new InjectionToken('LOCAL_STORAGE_ENGINE', {\n  providedIn: 'root',\n  factory: () => localStorage\n});\nconst SESSION_STORAGE_ENGINE = new InjectionToken('SESSION_STORAGE_ENGINE', {\n  providedIn: 'root',\n  factory: () => sessionStorage\n});\n/**\n * The public api for consumers of @ngxs/storage-plugin\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { LOCAL_STORAGE_ENGINE, NGXS_STORAGE_PLUGIN_OPTIONS, NgxsStoragePlugin, NgxsStoragePluginModule, SESSION_STORAGE_ENGINE, STORAGE_ENGINE }; //# sourceMappingURL=ngxs-storage-plugin.js.map",
  "map": null,
  "metadata": {},
  "sourceType": "module"
}
